{
    "blocks": {
        "Input": [
            {
                "name": "Input Dataset (from huggingface.co)",
                "function": null,
                "parameters": [
                    {"name": "input_dataset", "description": "Input dataset from huggingface.co/datasets (e.g. 'dair-ai/emotion')", "value": null},
                    {"name": "dataset_type", "description": "Dataset type from huggingface.co/datasets (currently could be either 'text' or 'image')", "value": null},
                    {"name": "dataset_config", "description": "Dataset configuration (e.g. 'default'). This is indicated in from huggingface.co/datasets when you click in the 'Use in the Datasets library' button as a second argument of the load_dataset function.", "value": null}
                ]
            }

        ],
        "Normalization": [
            {
                "name": "Batch Normalization 1D",
                "function": "torch.nn.BatchNorm1d",
                "parameters": [
                    { "name": "layer_type", "description": "Type of the layer", "value": null},
                    { "name": "kernel_size", "description": "Size of the convolving kernel", "value": null},
                    { "name": "num_features", "description": "Number of features", "value": null },
                    { "name": "momentum", "description": "Momentum", "value": null },
                    { "name": "eps", "description": "Epsilon", "value": null },
                    { "name": "affine", "description": "Whether to use learnable affine parameters", "value": null }
                ]
            },
            {
                "name": "Batch Normalization 2D",
                "function": "torch.nn.BatchNorm2d",
                "parameters": [
                    { "name": "layer_type", "description": "Type of the layer", "value": null},
                    { "name": "kernel_size", "description": "Size of the convolving kernel", "value": null},
                    { "name": "num_features", "description": "Number of features", "value": null },
                    { "name": "momentum", "description": "Momentum", "value": null },
                    { "name": "eps", "description": "Epsilon", "value": null },
                    { "name": "affine", "description": "Whether to use learnable affine parameters", "value": null }
                ]
            },
            {
                "name": "Layer Normalization",
                "function": "torch.nn.LayerNorm",
                "parameters": [
                    { "name": "layer_type", "description": "Type of the layer", "value": null},
                    { "name": "kernel_size", "description": "Size of the convolving kernel", "value": null},
                    { "name": "normalized_shape", "description": "Input size or shape", "value": null },
                    { "name": "eps", "description": "Epsilon", "value": null },
                    { "name": "elementwise_affine", "description": "Whether to apply affine transformation element-wise", "value": null }
                ]
            }
        ],
        "Element-wise": [
            {
                "name": "Addition",
                "function": "torch.add",
                "parameters": [
                    { "name": "tensor1", "description": "First tensor: choose a column name", "value": null },
                    { "name": "tensor2", "description": "Second tensor: choose a column name", "value": null }
                ]
            },
            {
                "name": "Subtraction",
                "function": "torch.sub",
                "parameters": [
                    { "name": "tensor1", "description": "First tensor: choose a column name", "value": null },
                    { "name": "tensor2", "description": "Second tensor: choose a column name", "value": null }
                ]
            },
            {
                "name": "Multiplication",
                "function": "torch.mul",
                "parameters": [
                    { "name": "tensor1", "description": "First tensor: choose a column name", "value": null },
                    { "name": "tensor2", "description": "Second tensor: choose a column name", "value": null }
                ]
            },
            {
                "name": "Division",
                "function": "torch.div",
                "parameters": [
                    { "name": "tensor1", "description": "First tensor: choose a column name", "value": null },
                    { "name": "tensor2", "description": "Second tensor: choose a column name", "value": null }
                ]
            },
            {
                "name": "Linear",
                "function": "torch.nn.Linear",
                "parameters": [
                    { "name": "layer_type", "description": "Type of the layer", "value": null },
                    { "name": "in_features", "description": "Size of each input sample", "value": null },
                    { "name": "out_features", "description": "Size of each output sample", "value": null },
                    { "name": "bias", "description": "If set to False, the layer will not learn an additive bias", "value": null }
                ]
            }
        ],
        "Reshaping Layers": [
            {
                "name": "Flatten",
                "function": "torch.nn.Flatten",
                "parameters": [
                    { "name": "layer_type", "description": "Type of the layer", "value": null },
                    { "name": "start_dim", "description": "The dimension to start flattening (0-based index)", "value": null },
                    { "name": "end_dim", "description": "The dimension to stop flattening (exclusive)", "value": null }
                ]
            }
        ],
        "Regularization": [
            {
                "name": "Dropout",
                "function": "torch.nn.Dropout",
                "parameters": [
                    { "name": "layer_type", "description": "Type of the layer", "value": null},
                    { "name": "input_tensor", "description": "Input tensor", "value": null },
                    { "name": "output_tensor", "description": "Output tensor", "value": null },
                    { "name": "kernel_size", "description": "Size of the convolving kernel", "value": null},
                    { "name": "p", "description": "Dropout probability", "value": null }
                ]
            }
        ],
        "Activation": [
            {
                "name": "Sigmoid",
                "function": "torch.nn.Sigmoid",
                "parameters": [
                    { "name": "layer_type", "description": "Type of the layer", "value": null},
                    { "name": "input_tensor", "description": "Input tensor", "value": null },
                    { "name": "output_tensor", "description": "Output tensor", "value": null }
                ]
            },
            {
                "name": "Tanh",
                "function": "torch.nn.Tanh",
                "parameters": [
                    { "name": "layer_type", "description": "Type of the layer", "value": null},
                    { "name": "input_tensor", "description": "Input tensor", "value": null },
                    { "name": "output_tensor", "description": "Output tensor", "value": null }

                ]
            },
            {
                "name": "ReLU",
                "function": "torch.nn.ReLU",
                "parameters": [
                    { "name": "layer_type", "description": "Type of the layer", "value": null},
                    { "name": "input_tensor", "description": "Input tensor", "value": null },
                    { "name": "output_tensor", "description": "Output tensor", "value": null }
                ]
            },
            {
                "name": "Leaky ReLU",
                "function": "torch.nn.LeakyReLU",
                "parameters": [
                    { "name": "layer_type", "description": "Type of the layer", "value": null},
                    { "name": "kernel_size", "description": "Size of the convolving kernel", "value": null},
                    { "name": "input_tensor", "description": "Input tensor", "value": null },
                    { "name": "output_tensor", "description": "Output tensor", "value": null },
                    { "name": "negative_slope", "description": "Negative slope", "value": null }
                ]
            },
            {
                "name": "Softmax",
                "function": "torch.nn.Softmax",
                "parameters": [
                    { "name": "layer_type", "description": "Type of the layer", "value": null},
                    { "name": "kernel_size", "description": "Size of the convolving kernel", "value": null},
                    { "name": "input_tensor", "description": "Input tensor", "value": null },
                    { "name": "output_tensor", "description": "Output tensor", "value": null },
                    { "name": "dim", "description": "Dimension along which softmax will be computed", "value": null }
                ]
            },
            {
                "name": "Multihead Attention",
                "function": "torch.nn.MultiheadAttention",
                "parameters": [
                    { "name": "embed_dim", "description": "Total dimension of the model input", "value": null },
                    { "name": "num_heads", "description": "Number of parallel attention heads", "value": null },
                    { "name": "dropout", "description": "Dropout probability", "value": null },
                    { "name": "bias", "description": "Whether to add bias to key and value sequences", "value": null },
                    { "name": "add_bias_kv", "description": "Whether to add bias to the key and value sequences", "value": null },
                    { "name": "add_zero_attn", "description": "Whether to add a new batch of zeros to key and value sequences at each forward call", "value": null },
                    { "name": "kdim", "description": "Total number of features in key", "value": null },
                    { "name": "vdim", "description": "Total number of features in value", "value": null }                ]
            }
        ],
        "Convolutional Layers": [
            {
                "name": "Conv1d",
                "function": "torch.nn.Conv1d",
                "parameters": [
                {
                    "name": "in_channels",
                    "description": "The number of input channels (e.g., number of word embeddings for text data)",
                    "value": null
                },
                {
                    "name": "out_channels",
                    "description": "The number of output channels from the convolution",
                    "value": null
                },
                {
                    "name": "kernel_size",
                    "description": "The size of the convolutional filter",
                    "value": null
                },
                {
                    "name": "stride",
                    "description": "The stride of the convolution (step size)",
                    "value": null
                },
                {
                    "name": "padding",
                    "description": "Padding added to the input (0 for no padding)",
                    "value": null
                },
                {
                    "name": "dilation",
                    "description": "Spacing between elements in the filter",
                    "value": null
                },
                {
                    "name": "bias",
                    "description": "If False, then no bias term is added",
                    "value": null
                }
                ]
            },
            {
                "name": "Max Pooling 1d",
                "function": "torch.nn.MaxPool1d",
                "parameters": [
                {
                    "name": "kernel_size",
                    "description": "The size of the max pooling window",
                    "value": null
                },
                {
                    "name": "stride",
                    "description": "The stride of the pooling operation",
                    "value": null
                },
                {
                    "name": "padding",
                    "description": "Padding added to the input (0 for no padding)",
                    "value": null
                },
                {
                    "name": "ceil_mode",
                    "description": "If True, will use ceil instead of floor to compute the output shape. This ensures that every element in the input tensor is covered by a sliding window.",
                    "value": null
                }
                ]
            },
                        {
                "name": "Average Pooling 1d",
                "function": "torch.nn.AvgPool1d",
                "parameters": [
                    { "name": "layer_type", "description": "Type of the layer", "value": null},
                    { "name": "input_tensor", "description": "Input tensor", "value": null },
                    { "name": "output_tensor", "description": "Output tensor", "value": null },
                    { "name": "kernel_size", "description": "Kernel size", "value": null },
                    { "name": "stride", "description": "Stride of the window", "value": null },
                    { "name": "padding", "description": "Implicit zero padding to be added on both sides", "value": null },
                    { "name": "ceil_mode", "description": "Whether to use ceil instead of floor to compute the output shape", "value": null },
                    { "name": "count_include_pad", "description": "Whether to include the zero-padding in the averaging calculation", "value": null }
                ]
            },
            {
                "name": "Conv2d",
                "function": "torch.nn.Conv2d",
                "parameters": [
                    {
                        "name": "in_channels",
                        "description": "The number of input channels (e.g., number of word embeddings for text data)",
                        "value": null
                    },
                    {
                        "name": "out_channels",
                        "description": "The number of output channels from the convolution",
                        "value": null
                    },
                    {
                        "name": "kernel_size",
                        "description": "The size of the convolutional filter",
                        "value": null
                    },
                    {
                        "name": "stride",
                        "description": "The stride of the convolution (step size)",
                        "value": null
                    },
                    {
                        "name": "padding",
                        "description": "Padding added to the input (0 for no padding)",
                        "value": null
                    }
                ]
            },
            {
                "name": "Max Pooling 2d",
                "function": "torch.nn.MaxPool2d",
                "parameters": [
                    { "name": "layer_type", "description": "Type of the layer", "value": null},
                    { "name": "kernel_size", "description": "Size of the convolving kernel", "value": null},
                    { "name": "input_tensor", "description": "Input tensor", "value": null },
                    { "name": "output_tensor", "description": "Output tensor", "value": null },
                    { "name": "dilation", "description": "A parameter that controls the stride of elements in the window", "value": null },
                    { "name": "return_indices", "description": "Whether to return the max indices along with the outputs", "value": null },
                    { "name": "ceil_mode", "description": "Whether to use ceil instead of floor to compute the output shape", "value": null }                ]
            },
            {
                "name": "Average Pooling 2d",
                "function": "torch.nn.AvgPool2d",
                "parameters": [
                    { "name": "layer_type", "description": "Type of the layer", "value": null},
                    { "name": "input_tensor", "description": "Input tensor", "value": null },
                    { "name": "output_tensor", "description": "Output tensor", "value": null },
                    { "name": "kernel_size", "description": "Kernel size", "value": null },
                    { "name": "stride", "description": "Stride of the window", "value": null },
                    { "name": "padding", "description": "Implicit zero padding to be added on both sides", "value": null },
                    { "name": "ceil_mode", "description": "Whether to use ceil instead of floor to compute the output shape", "value": null },
                    { "name": "count_include_pad", "description": "Whether to include the zero-padding in the averaging calculation", "value": null }
                ]
            }
        ]
    }
}
